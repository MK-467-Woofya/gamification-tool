services:
  # api_db:
  #  image: postgres:13
  #  volumes:
  #    - api_postgres_data:/var/lib/postgresql/data/
  #  env_file:
  #    - ./.env.prod.db
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile.prod
    command: gunicorn gamification_tool.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/app/api/staticfiles
      - media_volume:/home/app/api/mediafiles
    expose:
      - 8000
    env_file:
      - ./.env.prod
    #depends_on:
    #  - api_db
  nginx-proxy:
    container_name: nginx-proxy
    build: ./nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - static_volume:/home/app/api/staticfiles
      - media_volume:/home/app/api/mediafiles
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - api
  acme-companion:
    image: nginxproxy/acme-companion
    env_file:
      - ./.env.prod.proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx-proxy
volumes:
  # api_postgres_data:
  static_volume:
  media_volume:
  certs:
  html:
  vhost:
  acme:

# Postgres commented out
# but could be used instead of the AWS RDS instance if preferred